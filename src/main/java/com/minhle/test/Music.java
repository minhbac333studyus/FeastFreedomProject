package com.minhle.test;

import java.util.List;

import org.springframework.data.annotation.Id;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
 
@Data
@NoArgsConstructor
@DynamoDBTable(tableName = "Music")
@AllArgsConstructor 
public class Music {
 
	// Spring-Data requires having a dedicated entity representing the key
	@Id
	// To ignore getter and setter for 'id' field : otherwise gives Mapping Exception
	// This is because we don't want id to be a separate column in the table. Rather we want artist and
	// songTitle to be columns in the table and dynamodb to automatically understand that the key of composed
	// if both the attributes
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
	// ---------------------
	public  MusicCompositeKey id;
	 
	@DynamoDBAttribute
	private String genre;
 
	@DynamoDBAttribute
	private String albumTitle;
 
	@DynamoDBAttribute
	private List<String> reviews;
 
	@DynamoDBAttribute
	private MiscellaneousInformation otherinfo;
 
	@DynamoDBAttribute
	// We need an index on year to able to query on its basis
    @DynamoDBIndexHashKey(attributeName = "year", globalSecondaryIndexName="year-index")
	private Integer year;
 
	public Music(String artist, String songTitle, String genre, String albumTitle, Integer year, List<String> reviews, MiscellaneousInformation otherinfo) {
    	this.genre = genre;
    	this.albumTitle = albumTitle;
    	this.year = year;
    	this.reviews = reviews;
    	this.otherinfo = otherinfo;
    	this.id = new MusicCompositeKey();
        this.id.setArtist(artist);
        this.id.setSongTitle(songTitle);
	}
 
	@DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
	// This allows creating of artist in the Music table instead of inside the attribute Id
	public String getArtist() {
    	return this.id==null ? null : this.id.getArtist();
	}
 
	public void setArtist(String artist) {
    	if(this.id == null) {
        	this.id = new MusicCompositeKey();
    	}
        this.id.setArtist(artist);
	}
 
	@DynamoDBRangeKey
	// This allows creating of sontTitle in the Music table instead of inside the attribute Id
	public String getSongTitle() {
    	return this.id==null ? null : this.id.getSongTitle();
	}
 
	public void setSongTitle(String songTitle) {
    	if(this.id == null) {
        	this.id = new MusicCompositeKey();
    	}
        this.id.setSongTitle(songTitle);
	}
 
    // Create an index on Miscellaneous.quality to be able to query on a sub-document
    @DynamoDBIndexRangeKey(localSecondaryIndexName = "quality-index")
	public String getQuality() {
    	if(otherinfo != null) {
        	return otherinfo.getQuality();
    	}
    	return null;
	}
 
	public void setQuality(String quality) {
    	if(otherinfo != null) {
            otherinfo.quality = quality;
        	return;
    	}
    	otherinfo =  new MiscellaneousInformation(quality);
	}
	// ---------------------------------------------------------------------------------
 
}